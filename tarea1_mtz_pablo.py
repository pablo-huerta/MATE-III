# -*- coding: utf-8 -*-
"""TAREA1_Mtz_Pablo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-f5gcVDlsGHVzGxdbWRGqN5e0AYYXvle
"""

from sympy import symbols, cos, sin, pi, plot_parametric
t = symbols("t") #Definimos parametro t

# Curva Asteroide #
x_asteroide = cos(t)**3
y_asteroide = sin(t)**3

# Involuta de la Curva Asteroide #
x_asteroide_involuta = (3 * cos(t) - cos(3 * t)) / 8
y_asteroide_involuta = (3 * sin(t) + sin(3 * t)) / 8

# Grafica la curva asteroide y su involuta y se imprime el título de la gráfica y su leyenda #
p = plot_parametric((x_asteroide, y_asteroide, (t, 0, 2 * pi)), show=False, line_color="blue", label = "Curva Asteroide")
p.extend(plot_parametric((x_asteroide_involuta, y_asteroide_involuta, (t, 0, 2 * pi)), show=False, line_color="red", line_style="--", label="Involuta"))
p.title = "Curva Asteroide y su Involuta"
p.legend = True
p.show()

from sympy import symbols, sin, pi, plot_parametric

# Definimos el parámetro t
t = symbols("t")

# Curva Lissajous
x_lissajous = sin(2 * t)
y_lissajous = sin(3 * t)
x_lissajous_involuta = sin(2 * t) - t * cos(2 * t)
y_lissajous_involuta = sin(3 * t) - t * cos(3 * t)

# Crear las gráficas
p2 = plot_parametric((x_lissajous, y_lissajous, (t, 0, 2 * pi)), show=False, line_color="green", label="Curva Lissajous")
p2.extend(plot_parametric((x_lissajous_involuta, y_lissajous_involuta, (t, 0, 2 * pi)), show=False, line_color="orange", line_style="--", label="Involuta Lissajous"))

# Añadir título y leyenda
p2.title = "Curva Lissajous y su Involuta"
p2.legend = True

# Mostrar el gráfico
p2.show()

from sympy import symbols, sinh, cosh, plot_parametric

# Definimos el parámetro t
t = symbols("t")

# Curva Catenaria
x_catenaria = sinh(t)
y_catenaria = cosh(t)
x_catenaria_involuta = sinh(t) - t * cosh(t)
y_catenaria_involuta = cosh(t) - t * sinh(t)

# Crear las gráficas
p4 = plot_parametric((x_catenaria, y_catenaria, (t, -2, 2)), show=False, line_color="cyan", label="Curva Catenaria")
p4.extend(plot_parametric((x_catenaria_involuta, y_catenaria_involuta, (t, -2, 2)), show=False, line_color="magenta", line_style="--", label="Involuta Catenaria"))

# Añadir título y leyenda
p4.title = "Curva Catenaria y su Involuta"
p4.legend = True

# Mostrar el gráfico
p4.show()

from sympy import symbols, cos, sin, pi, plot_parametric

# Definimos el parámetro t
t = symbols("t")

# Curva Círculo
r = 1  # Radio del círculo
x_circulo = r * cos(t)
y_circulo = r * sin(t)

# Involuta del Círculo
x_circulo_involuta = r * (cos(t) + t * sin(t))
y_circulo_involuta = r * (sin(t) - t * cos(t))

# Crear las gráficas
p7 = plot_parametric((x_circulo, y_circulo, (t, 0, 2 * pi)), show=False, line_color="blue", label="Curva Círculo")
p7.extend(plot_parametric((x_circulo_involuta, y_circulo_involuta, (t, 0, 2 * pi)), show=False, line_color="red", line_style="--", label="Involuta Círculo"))

# Añadir título y leyenda
p7.title = "Curva Círculo y su Involuta"
p7.legend = True

# Mostrar el gráfico
p7.show()

from sympy import symbols, cos, sin, pi, plot_parametric

# Definimos el parámetro t
t = symbols("t")

# Parámetros de la elipse
a = 2  # Semi-eje mayor
b = 1  # Semi-eje menor

# Curva Elipse
x_elipse = a * cos(t)
y_elipse = b * sin(t)

# Involuta de la Elipse
x_elipse_involuta = a * (cos(t) + (b**2 / a**2) * t * sin(t))
y_elipse_involuta = b * (sin(t) - (a**2 / b**2) * t * cos(t))

# Crear las gráficas
p8 = plot_parametric((x_elipse, y_elipse, (t, 0, 2 * pi)), show=False, line_color="blue", label="Curva Elipse")
p8.extend(plot_parametric((x_elipse_involuta, y_elipse_involuta, (t, 0, 2 * pi)), show=False, line_color="red", line_style="--", label="Involuta Elipse"))

# Añadir título y leyenda
p8.title = "Curva Elipse y su Involuta"
p8.legend = True

# Mostrar el gráfico
p8.show()

from sympy import symbols, cos, sin, plot_parametric

# Define the parameter t
t = symbols("t")

# Semicubical Parabola: y^2 = x^3
x_semicubical_parabola = t**2
y_semicubical_parabola = t**3

# Involute of the Semicubical Parabola
x_semicubical_parabola_involuta = t**2 - (9 * t**4) / (10 * t**2)
y_semicubical_parabola_involuta = t**3 - (3 * t**5) / (10 * t**2)

# Create the plots
p9 = plot_parametric((x_semicubical_parabola, y_semicubical_parabola, (t, -2, 2)), show=False, line_color="blue", label="Semicubical Parabola")
p9.extend(plot_parametric((x_semicubical_parabola_involuta, y_semicubical_parabola_involuta, (t, -2, 2)), show=False, line_color="red", line_style="--", label="Involute"))

# Add title and legend
p9.title = "Semicubical Parabola and its Involute"
p9.legend = True

# Show the plot
p9.show()